// Copyright 2017-2018 @polkadot/client-wasm authors & contributors
// This software may be modified and distributed under the terms
// of the ISC license. See the LICENSE file for details.

import hexToU8a from '@polkadot/util/hex/toU8a';
import memoryDb from '@polkadot/util-triedb/temp';

import init from '@polkadot/client-chains';

describe('executeBlock', () => {
  const TEST = hexToU8a(
    '0x' +
    '0d5522abf50c1049c56ae7db8b57adfc7e0237a508eddd885f13f93cf7c108c9' +
    '0100000000000000' +
    'e13830b972ecbf60ccb46ca15fd8519e60478458c7703ad9c4c22e1255420d41' +
    '4e8ff6471166c3813314e034e0c40a028c85942a3a9995e93111cd6e18e91d04' +
    '00000000' +
    '02000000' +
    '6f000000' +
    'ff' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '00000000' +
    '0300' +
    '6d71375b' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '00000000' +
    '6b000000' +
    'ff' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '00000000' +
    '080' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '0000000000000000000000000000000000000000000000000000000000000000' +
    '000000000'
  );
  let chain;

  beforeEach(() => {
    const config = {
      chain: 'dev',
      wasm: {}
    };

    chain = init(config, memoryDb(), memoryDb());
  });

  it('has the same storage signature', () => {
    expect(
      new Uint8Array([
        13, 85, 34, 171, 245, 12, 16, 73, 197, 106, 231, 219, 139, 87, 173, 252, 126, 2, 55, 165, 8, 237, 221, 136, 95, 19, 249, 60, 247, 193, 8, 201,
        1, 0, 0, 0, 0, 0, 0, 0,
        225, 56, 48, 185, 114, 236, 191, 96, 204, 180, 108, 161, 95, 216, 81, 158, 96, 71, 132, 88, 199, 112, 58, 217, 196, 194, 46, 18, 85, 66, 13, 65, 78, 143, 246, 71, 17, 102, 195, 129, 51, 20, 224, 52, 224, 196, 10, 2, 140, 133, 148, 42, 58, 153, 149, 233, 49, 17, 205, 110, 24, 233, 29, 4,
        0, 0, 0, 0,
        2, 0, 0, 0,
        111, 0, 0, 0,
        255,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0,
        109, 113, 55, 91,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        107, 0, 0, 0,
        255,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      ])
    ).toEqual(TEST);
  });

  it('executes an actual block', () => {
    expect(
      chain.executor.executeBlock(TEST)
    ).toEqual(true);
  });
});
